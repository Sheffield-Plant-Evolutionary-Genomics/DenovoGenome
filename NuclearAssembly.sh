#!/bin/bash
#$ -l h_rt=96:00:00
#$ -l mem=12G
#$ -l rmem=12G
#$ -P alloteropsis
#$ -q alloteropsis.q
#$ -pe openmp 16
#$ -v OMP_NUM_THREADS=16
#$ -j y

#####################################################################################
#       Script Name:    NuclearAssembly.sh
#       Description:    Fish nuclear HiFi reads and assemble them
#       Author:         LPereiraG
#       Last updated:   24/11/2022
#####################################################################################

source /usr/local/extras/Genomics/.bashrc
alias python=python3

#### Directories and files
wd=/mnt/fastdata/bo1lpg/Stipagrostis
chloroplast=${wd}/data/Stipagrostis_chloroplast_ref.fa
reads=/shared/dunning_lab/User/bo1lpg-backup/Stipagrostis/data/Stipagrostis_reads.fa

#### Parameters
sample='Stipagrostis'

#### Step 1: Generate a FASTA with the mitochondrial selected contigs from multi GFF3+FASTA file
# The GFF3+FASTA is generated by GeSeq and contains only contigs with annotated genes.
# Use those contig names to extract the sequences and generate a final mitochondrial draft genome
cd A02_results/reads_mapping_and_assembly/subsampling/
mkdir final_contigs_after_annotation
cd final_contigs_after_annotation
grep ">" ${sample}_mitochondria.clean_GLOBAL_multi-GFF3+FASTA.gff3 | sed 's/>//g' > contig.list
seqtk subseq ${wd}/A02_results/reads_mapping_and_assembly/subsampling/${sample}_mitochondria.clean.fa.fasta contig.list \
  >> ${wd}/data/${sample}_mitochondria_ref.fa
mitochondria=${wd}/data/${sample}_mitochondria_ref.fa

#### Step 2: Concatenate the two organelle references and map all reads against it. Select unmapped reads.
cd ${wd}
mkdir A03_results
cd A03_results
module load apps/python/anaconda2-4.2.03
source activate /shared/dunning_lab/Shared/conda_env/minimap2
cat ${mitochondria} ${chloroplast} >> organelle_ref.fa
minimap2 -x map-hifi organelle_ref.fa ${reads} -t 16 > aln_organelle.paf
awk '{if ($10/$2 > 0.8) print $1}' aln_organelle.paf | sort | uniq > reads_to_filter_out.txt
cp ${reads} ${sample}_reads.fasta
samtools faidx ${sample}_reads.fasta
awk '{print $1}' ${sample}_reads.fasta.fai >> all_reads.txt
cat all_reads.txt reads_to_filter_out.txt | sort | uniq -u >> reads_to_keep.txt
seqtk subseq ${sample}_reads.fasta reads_to_keep.txt >> ${sample}_nuclear_reads.fa

#### Step 3: Assemble the nuclear reads
# Adjust genome size and number of haplotypes to the target species
/shared/dunning_lab/Shared/programs/hifiasm-0.16.1/./hifiasm -o ${sample}_nuclear_4n.asm -t 16 \
  --hg-size 0.5g --n-hap 4 Stipagrostis_nuclear_reads.fa
awk '/^S/{print ">"$2;print $3}' ${sample}_nuclear_4n.asm.bp.p_ctg.gfa > ${sample}_nuclear_4n.asm.bp.p_ctg.fa

#### Step 4: Check completeness with BUSCO
lineages=/shared/dunning_lab/Shared/programs/BUSCO-db/poales_odb10
cd ${wd}
mkdir A04_results
cd A04_results
cp -r /usr/local/extras/Genomics/apps/augustus/3.3.2/config .
export AUGUSTUS_CONFIG_PATH=${wd}/A04_results/config
mkdir -p temp-${sample}
busco --in ${assemblies} --lineage_path ${lineages}/ --out ${sample} --mode geno --cpu 4 -r \
  --tmp_path ${tempfiles}-${sample}/ --tarzip

#### Step 5: Run inspector to check the quality of the assembly
source activate /shared/dunning_lab/Shared/conda_env/inspector/
cd ${wd}
mkdir A05_results
cd A05_results
inspector.py -c ${wd}/A03_results/${sample}_nuclear_4n.asm.bp.p_ctg.fa -r ${wd}/A03_results/${sample}_nuclear_reads.fa \
  -o ${sample} --datatype hifi -t 16

#### Step 6: run EDTA to identify transposable elements
cd ${wd}
mkdir A06_results
cd A06_results
source activate /shared/dunning_lab/Shared/conda_env/edta
perl EDTA.pl --genome ${wd}/A03_results/${sample}_nuclear_4n.asm.bp.p_ctg.fa -t 16 --anno 1

#### Step 7: run RepeatMasker to identify simple repeats
cd ${wd}
source activate /shared/dunning_lab/Shared/conda_env/repeatmasker
RepeatMasker -pa 16 -s -lib A06_results/${sample}_nuclear_4n.asm.bp.p_ctg.fa.mod.EDTA.TElib.fa -dir A07_results -e ncbi \
  ${wd}/A03_results/${sample}_nuclear_4n.asm.bp.p_ctg.fa

#### Step 8: softmask the genome using results from RepeatMasker
source /usr/local/extras/Genomics/.bashrc
cd ${wd}
mkdir A08_results
cd A08_results
sed -e '1,3d' ${wd}/A07_results/${sample}_nuclear_4n.asm.bp.p_ctg.fa.out | awk -v OFS='\t' '{print $5, $6-1, $7}' \
  | sort -k1,1 -k2,2 -V > ${sample}_nuclear_4n.bed
bedtools maskfasta -soft -fi ${wd}/A03_results/${sample}_nuclear_4n.asm.bp.p_ctg.fa -bed ${sample}_nuclear_4n.bed
  -fo ${sample}_nuclear_4n-softMasked.fa
